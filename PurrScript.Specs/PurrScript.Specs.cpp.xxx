
    describe("Importing package components", []() {
        it("can import package and access its variables via namespace", []() {
            PurrScriptSpecEnvironment env;
            auto*                     context = env.CreateContext();

            auto& somePackage   = env.NewPackage("CoolThings");
            auto* coolNamespace = somePackage->DefineNamespaces({"Hello", "World"});
            somePackage->DefineGlobalFunction(
                "MyFunction",
                unique_function_pointer([](ScriptContext*, FunctionArguments*) -> Value* {
                    _Log_("Called Hello.World.MyFunction()");
                    return VoidValue();
                }),
                coolNamespace
            );

            context->ExecuteCode(R"(
                import("CoolThings")

                Hello.World.MyFunction()
            )");

            AssertThat(ReadLogs(), Contains("Called Hello.World.MyFunction()"));
        });

        it("can 'include' a namespace to include all of its variables directly", []() {
            PurrScriptSpecEnvironment env;
            auto*                     context = env.CreateContext();

            auto& somePackage   = env.NewPackage("CoolThings");
            auto* coolNamespace = somePackage->DefineNamespaces({"Hello", "World"});
            somePackage->DefineGlobalFunction(
                "MyFunction",
                unique_function_pointer([](ScriptContext*, FunctionArguments*) -> Value* {
                    _Log_("Called Hello.World.MyFunction()");
                    return VoidValue();
                }),
                coolNamespace
            );

            context->ExecuteCode(R"(
                import("CoolThings")
                include("Hello")

                World.MyFunction()
            )");

            AssertThat(ReadLogs(), Contains("Called Hello.World.MyFunction()"));
        });

        it("can 'include' a namespace to include all of its variables directly", []() {
            PurrScriptSpecEnvironment env;
            auto*                     context = env.CreateContext();

            auto& somePackage   = env.NewPackage("CoolThings");
            auto* coolNamespace = somePackage->DefineNamespaces({"Hello", "World"});
            somePackage->DefineGlobalFunction(
                "MyFunction",
                unique_function_pointer([](ScriptContext*, FunctionArguments*) -> Value* {
                    _Log_("Called Hello.World.MyFunction()");
                    return VoidValue();
                }),
                coolNamespace
            );

            context->ExecuteCode(R"(
                import("CoolThings")
                include("Hello.World")

                MyFunction()
            )");

            AssertThat(ReadLogs(), Contains("Called Hello.World.MyFunction()"));
        });

        it("can 'include' and 'import' in the same line somehow", []() {
            PurrScriptSpecEnvironment env;
            auto*                     context = env.CreateContext();

            auto& somePackage   = env.NewPackage("CoolThings");
            auto* coolNamespace = somePackage->DefineNamespaces({"Hello", "World"});
            somePackage->DefineGlobalFunction(
                "MyFunction",
                unique_function_pointer([](ScriptContext*, FunctionArguments*) -> Value* {
                    _Log_("Called Hello.World.MyFunction()");
                    return VoidValue();
                }),
                coolNamespace
            );

            context->ExecuteCode(R"(
                include("Hello.World", { from = "CoolThings" })

                MyFunction()
            )");

            AssertThat(ReadLogs(), Contains("Called Hello.World.MyFunction()"));
        });
    });
